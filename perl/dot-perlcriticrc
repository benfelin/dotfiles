severity = brutal
# Tell us which rule this violated, so we can tell it to get lost
verbose  = [%p] %m at %f line %l, near '%r'\n

color                  = 1
color-severity-highest = red
color-severity-high    = magenta
color-severity-medium  = yellow
color-severity-low     = green
color-severity-lowest  = blue

### Git
# We use git, not svn or RCS
#[-Miscellanea::RequireRcsKeywords]

# We'll enforce dependencies in other ways, rather than magically putting
# a $VERSION variable in modules.
[-Modules::RequireVersionVar]

### Modern Perl
# We'll run on at least perl 5.10
#[Compatibility::PodMinimumVersion]
#above_version = 5.010

# So don't badger us about explicitly declaring which version of Perl we
# require
#[-Compatibility::PerlMinimumVersionAndWhy]

### Moose
# Builders are pulled in from Moose, but perlcritic can't possibly begin
# to fathom that out. So let these things slide.
[Subroutines::ProhibitUnusedPrivateSubroutines]
private_name_regex = _(?!build)\w+
skip_when_using = Moose

# We *do* mean the difference between low- and high-precedence operators.
#[-ValuesAndExpressions::ProhibitMixedBooleanOperators]

# Perltidy is a judgement call.
#[-CodeLayout::RequireTidyCode]

# Damian Conway's insistence that the literal '' or "" in a proper
# monospaced font is difficult to read is frankly bizarre.
[-ValuesAndExpressions::ProhibitEmptyQuotes]
[-ValuesAndExpressions::ProhibitNoisyQuotes]

# There's muscle memory of always adding /xms to a regex, and then there's
# typing for the hell of it.
[-RegularExpressions::RequireDotMatchAnything]
[-RegularExpressions::RequireLineBoundaryMatching]

# Inline POD is good, dammit.
#[-Documentation::RequirePodAtEnd]

# These are internal Perl modules. They don't need all these sections.
#[-Documentation::RequirePodSections]

# We throw structured exceptions all the time. Carp would be a bad idea
# here.
#[-ErrorHandling::RequireCarping]

### We'll check this via code review, rather than automated tools.
# PPI can't tell the difference between methods (fine to use e.g. "delete")
# and subroutines (might trigger the indirect access mechanism by mistake),
# so this rule is useless.
#[-Subroutines::ProhibitBuiltinHomonyms]

# Plenty of cases where we say do_stuff({ ... }) PPI thinks that's a block
# brace, not an anonymous hash.
#[-ValuesAndExpressions::ProhibitCommaSeparatedStatements]

# This rule is also useless, as it doesn't know about named captures.
[-RegularExpressions::ProhibitUnusedCapture]

# Named captures also break this one.
[-Variables::ProhibitPunctuationVars]

# Tacit return values, or situations where it doesn't matter, are fine.
#[-Subroutines::RequireFinalReturn]

# Similarly, if it compiles, who the hell cares what the last value was?
#[-Modules::RequireEndWithOne]

# Double-sigil dereferences are almost certainly fine. The examples of bad
# stuff in PBP are straw men.
[-References::ProhibitDoubleSigils]

# Accessors that look at @_ before doing things are fine.
#[-Subroutines::RequireArgUnpacking]

# Unless blocks are fine, possibly.
[-ControlStructures::ProhibitUnlessBlocks]

# Let a human decide whether range comparisons in an unless block are fine
[-ControlStructures::ProhibitNegativeExpressionsInUnlessAndUntilConditions]

# Likewise postfix if et al
[-ControlStructures::ProhibitPostfixControls]

# Some few modules need global variables. Let a human decide.
#[-Variables::ProhibitPackageVars]

# Let use warnings warn about reusing a variable at the same lexical scope;
# this rule warns about reusing at a different scope, which is potentially
# fine.
[-Variables::ProhibitReusedNames]

# A lot of our code deals with pure ASCII. This stuff is probably fine.
#[-RegularExpressions::ProhibitEnumeratedClasses]

# That trailing comma warning is annoying. Shut up.
#[-CodeLayout::RequireTrailingCommaAtNewline]

# Don't require a final semicolon either.
#[-CodeLayout::RequireFinalSemicolon]

# Far more numbers than 0, 1 and 2 are acceptable, but I can't be bothered
# configuring them. So, shut up. Code review will deal with this.
#[-ValuesAndExpressions::ProhibitMagicNumbers]

# A blanket ban on parentheses around builtins is annoying, and over-zealous.
#[-CodeLayout::ProhibitParensWithBuiltins]

# Putting braces around file handle objects is reasonable.
# Putting braces around bareword file handles like STDERR is frankly daft.
[-InputOutput::RequireBracedFileHandleWithPrint]

# reverse sort @array is indeed better than
# sort { $b cmp $a } @array
# I'm not so sure about hating on $b vs $a in e.g.
# sort { $b->{stuff} <=> $a->{stuff} }
#[-BuiltinFunctions::ProhibitReverseSortBlock]

# This is overridden by the better rule RequireCheckedSyscalls
[-InputOutput::RequireCheckedClose]

# Nobody (hopefully) thinks that prototypes allow argument-checking.
# But they do allow syntactic sugar, which is why we use them in e.g. Moose.
#[-Subroutines::ProhibitSubroutinePrototypes]

# This alerts unnecessarily for e.g. $foo = $1 if /.../ so skip it.
#[-RegularExpressions::ProhibitCaptureWithoutTest]

# Moose traits require an unwieldy package declaration to set up their trait,
# and putting that in a separate file is silly.
#[-Modules::ProhibitMultiplePackages]

# Perlcritic seems to think that stringy eval is wrong because people use it
# instead of block eval. I wonder how they think people are going to
# execute arbitrary code taken from a string otherwise?
#[-BuiltinFunctions::ProhibitStringyEval]

# This flatly doesn't work - it ignores automatic closing of filehandles
# when they go out of scope, but I've seen it complain about an open statement
# when there was a close on the very next line.
[-InputOutput::RequireBriefOpen]

# There's nothing inherently wrong with use constant. Complaining that you
# can't interpolate constants in strings is pretty weak tea.
#[-ValuesAndExpressions::ProhibitConstantPragma]

### Modules that import strictures etc.
# We have use strict and use warnings, dammit.
# Adding Test::Class::Moose temporarily as perlcritic doesn't realise that,
# like Moose, it enables strictures and warnings.
#[TestingAndDebugging::RequireUseStrict]
#equivalent_modules = common::sense our::way Test::Class::Moose

#[TestingAndDebugging::RequireUseWarnings]
#equivalent_modules = our::way Test::Class::Moose

# If someone disabled use strict or use warnings, they did it for a reason.
#[-TestingAndDebugging::ProhibitNoStrict]
[TestingAndDebugging::ProhibitNoWarnings]
allow = uninitialized

# Yes, require /x but perhaps not for really trivial regexen
# or stuff that looks for a constant
[RegularExpressions::RequireExtendedFormatting]
minimum_regex_length_to_complain_about = 100

# Sometimes you need an if ... elsif ... elsif etc. chain; allow more,
# and make it less important.
[ControlStructures::ProhibitCascadingIfElse]
max_elsif = 5
severity = cruel

# Checking return values is a good thing. Checking the return value of
# close or print STDERR is downright silly, as is checking whether you
# managed to sleep or not (!).
[InputOutput::RequireCheckedSyscalls]
functions = :builtins
exclude_functions = print close sleep

# Some things like DBIx::Class work fine with long chains of method calls.
# Bump up the number of method calls allowed.
#[ValuesAndExpressions::ProhibitLongChainsOfMethodCalls]
#max_chain_length = 5

############################
# NEED FURTHER CONSIDERATIONS
#############################

# Judgement call (default is 20)
[Modules::ProhibitExcessMainComplexity]
max_mccabe = 30
[RegularExpressions::ProhibitComplexRegexes]
max_characters = 100
[Subroutines::ProhibitExcessComplexity]
max_mccabe = 40

# printf misery
[TestingAndDebugging::ProhibitNoWarnings]
allow = uninitialized

# Some CPAN modules do not care about this one
# Why should I?
[-Objects::ProhibitIndirectSyntax]
